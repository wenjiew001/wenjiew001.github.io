<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github美化过程记录</title>
      <link href="/2025/08/22/Github%E7%BE%8E%E5%8C%96%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/08/22/Github%E7%BE%8E%E5%8C%96%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Github美化过程记录"><a href="#Github美化过程记录" class="headerlink" title="Github美化过程记录"></a>Github美化过程记录</h1><blockquote><p>最后的效果可以参考我的Github主页：</p><p><a href="https://github.com/wenjiew-astro">wenjiew-astro (Wenjie Wang)</a></p></blockquote><p>有很多很好的教程分享了自己的美化之路，我是个懒狗，所以就直接 <strong>Copy &amp; Paste</strong>，然后 <strong>改改改</strong> 就成了我自己的主页了，下面是我参考的最主要的教程来源：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/454597068">(99+ 封私信 &#x2F; 80 条消息) Github 首页美化教程（一）：打造个性化的GitHub首页 - 知乎</a></p></blockquote><p>当然了，还有很多很好的教程。如</p><blockquote><p><a href="https://www.cnblogs.com/PeterJXL/p/18437094">超详细的 GitHub 个人主页美化教程 - peterjxl - 博客园</a></p></blockquote><p>我这里就主要记录我自己的修改过程。</p><blockquote><p>Tips</p><p>你可以直接复制我的仓库，然后按照我的方法，就可以很容易构建你自己的主页了！</p><p>Have a nice day !!</p></blockquote><h2 id="1-首先要找到一个我们喜欢的主页"><a href="#1-首先要找到一个我们喜欢的主页" class="headerlink" title="1.首先要找到一个我们喜欢的主页"></a>1.首先要找到一个我们喜欢的主页</h2><p>因为我们不是自己做主页，所以第一要务就是要找到一个我们<strong>心仪</strong>的主页，然后”参考“一下（你懂我的意思吧）。这里我的来源是孙同学的主页 <a href="https://github.com/sun0225SUN/">sun0225SUN (Guoqi Sun)</a>。</p><p>找到之后，其实我们有两种方式，第一种就是直接克隆他的仓库，因为这个主页要求仓库的名字和用户的名字相同才会显示，所以在克隆的时候我们把仓库的名字改成我们自己的用户名就可以了。还有一种，就是把这个仓库下载下来，然后我们自己新建一个与用户名同名的仓库，使用电脑的git或者Github Desktop软件把这个代码推到我们刚刚建立的仓库里面去。</p><blockquote><p>注意要先打开仓库权限</p><ul><li>仓库 <strong>Settings → Actions → General → Workflow permissions</strong></li><li>选 <strong>Read and write permissions</strong></li><li>如果看到 “Allow GitHub Actions to create and approve pull requests”，也勾上</li></ul></blockquote><p>这里我推荐第二种，但其实第一种也没有任何问题。</p><p>之后我们只需要去改 <strong>README.md</strong> 这个文件内容就可以了，文件里面写了很多的注释，我相信你很容易就能看懂，下面我主要写一些我自己配置过程中的问题。</p><h2 id="配置过程中我遇到的问题-—-token问题"><a href="#配置过程中我遇到的问题-—-token问题" class="headerlink" title="配置过程中我遇到的问题 — token问题"></a>配置过程中我遇到的问题 — token问题</h2><p>这个问题是最头疼的问题了，修改过程中最麻烦的就是每一个插件都需要一个权限，这个权限主要是用来给自己建的那些action让它去自动更新我们的这个 <strong>README.md</strong> 文件。因此下面我就把所有需要用到的权限一次性列出来：</p><h3 id="WakaTime-Token"><a href="#WakaTime-Token" class="headerlink" title="WakaTime Token"></a>WakaTime Token</h3><p>这个主要作用是用来记录我们的编程时间的，官网是 <a href="https://wakatime.com/dashboard">Dashboard - WakaTime</a> 。</p><p>我们需要在官网注册一个账户，然后在设置里面找到 <strong>Edit profile</strong> ，在这里面该我们的<strong>名字</strong>和<strong>用户名</strong>。</p><blockquote><p>注意，这里的用户名就是你真正需要写到 <strong>README.md</strong> 中的名字</p></blockquote><p>之后，在设置里面你会看到 <strong>account</strong> 里面有 <strong>Secret API Key</strong> ，这个记住他，我们有两个地方需要用到：</p><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><ol><li><p>先拿到你的 <strong>WAKATIME_API_KEY</strong></p><ul><li><p>登录 <a href="https://wakatime.com/">WakaTime</a></p></li><li><p>右上角头像 → <strong>Settings → API Key</strong></p></li><li><p>会看到一串很长的 key（类似 <code>1234abcd-xxxx-xxxx-xxxx-abcdef123456</code>）</p></li><li><p>复制下来备用</p></li></ul></li><li><p>在 GitHub 仓库里添加 <strong>Secrets</strong></p><ul><li><p>打开你的仓库 → 点上方菜单里的 <strong>Settings</strong></p></li><li><p>左边栏找到 <strong>Secrets and variables → Actions</strong></p></li><li><p>点 <strong>New repository secret</strong></p></li><li><p>Name 填：<code>WAKATIME_API_KEY</code></p></li><li><p>Value 填：刚才复制的那串 key</p></li><li><p>保存</p></li></ul></li></ol><h4 id="你的代码编辑器"><a href="#你的代码编辑器" class="headerlink" title="你的代码编辑器"></a>你的代码编辑器</h4><ul><li>在你的编辑器（VS Code、PyCharm 等）里安装 WakaTime 插件。</li><li>输入你的 API Key（在 WakaTime Settings → API Key）。</li><li>正常写点代码，至少运行几个小时，产生实际的编码时间数据。</li><li>等一天（WakaTime 的 public profile 只显示“过去的天数”，新账号当天是不会展示的）。</li></ul><h3 id="各种Action的Token"><a href="#各种Action的Token" class="headerlink" title="各种Action的Token"></a>各种Action的Token</h3><p>.github&#x2F;workflows 里面总共有六个Action：</p><ol><li><a href="https://github.com/wenjiew-astro/wenjiew-astro/blob/main/.github/workflows/blog.yml">blog.yml</a></li><li><a href="https://github.com/wenjiew-astro/wenjiew-astro/blob/main/.github/workflows/contrib.yml">contrib.yml</a></li><li><a href="https://github.com/wenjiew-astro/wenjiew-astro/blob/main/.github/workflows/fork_star.yml">fork_star.yml</a></li><li><a href="https://github.com/wenjiew-astro/wenjiew-astro/blob/main/.github/workflows/metrics.yml">metrics.yml</a></li><li><a href="https://github.com/wenjiew-astro/wenjiew-astro/blob/main/.github/workflows/snake.yml">snake.yml</a></li><li><a href="https://github.com/wenjiew-astro/wenjiew-astro/blob/main/.github/workflows/waka.yml">waka.yml</a></li></ol><p>每一个Action他们需要的Token都不一样。虽然我们可以定义同一个api_key，但是Token的名字却不尽相同。（这里也就是我为什么推荐你用第一种方式，因为如果用第二种的话，可能还需要改更多的内容）</p><p>下面我写一下需要做的事情：</p><h4 id="生成-PAT"><a href="#生成-PAT" class="headerlink" title="生成 PAT"></a><strong>生成 PAT</strong></h4><ul><li>去 GitHub → Settings → Developer settings → <strong>Personal access tokens → Tokens (classic)</strong></li><li>点击「Generate new token (classic)」</li><li>勾选最少的权限：<ul><li><code>repo</code></li><li><code>read:user</code></li><li><code>read:org</code>（如果你要展示组织&#x2F;私有仓库信息）</li><li><code>workflow</code></li></ul></li><li>复制生成的 token（格式是 <code>ghp_XXXXXXXXX...</code>）</li></ul><h4 id="添加到仓库-Secrets"><a href="#添加到仓库-Secrets" class="headerlink" title="添加到仓库 Secrets"></a><strong>添加到仓库 Secrets</strong></h4><ul><li>打开你的仓库 <code>wenjiew-astro/wenjiew-astro</code></li><li>Settings → Secrets and variables → Actions → New repository secret</li><li>Name 填：<code>GH_TOKEN</code></li><li>Value 填：刚才生成的 PAT</li></ul><p>你需要把这个PAT放到如下几个不同的名字中去：</p><ol><li><code>GH_TOKEN</code></li><li><code>ACCESS_TOKEN</code></li><li><code>METRICS_TOKEN</code></li></ol><blockquote><p>你可能会有疑问，为什么要新建这么多Token，只用一个不行吗？答案是，可以！But，如果你这里只建一个Token的话，那你就需要去改那好几个yml文件，如果你想改的话当然没问题，你可以去改。</p></blockquote><h4 id="还有一个小点"><a href="#还有一个小点" class="headerlink" title="还有一个小点"></a>还有一个小点</h4><p>你会在 <strong>README.md</strong> 文件最后看到这样一句话：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img width=&quot;120%&quot; src=&quot;https://repobeats.axiom.co/api/embed/7aa7311e6885fc4b499b17d5c47c0cd5cbca9d4d.svg&quot; /&gt;</span><br></pre></td></tr></table></figure><p>这一行是 <strong><a href="https://repobeats.axiom.co/">Repobeats</a></strong> 服务，自动生成一张仓库贡献的动态分析图。比如提交数、活跃度、PR、issue 等，会显示成五颜六色的曲线图。这个 <strong>Repobeats</strong> 图，它并不是记录你的「整个 GitHub 账号」，而是记录<strong>某一个具体仓库</strong>的活动情况。</p><p>你只需要在 <strong><a href="https://repobeats.axiom.co/">Repobeats</a></strong>  这个网页中登录你的 Github 账号，然后选择需要记录的仓库，就会有一句这样的话：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Add the following to your README.md to embed Repobeats</span><br><span class="line"></span><br><span class="line">![Alt](https://repobeats.axiom.co/api/embed/7aa7311e6885fc4b499b17d5c47c0cd5cbca9d4d.svg &quot;Repobeats analytics image&quot;)</span><br></pre></td></tr></table></figure><p>你只需要把这里面的网址 替换掉就行了。这个时候基本就大功告成了。</p><p>如果你还有一个博客，那你就需要配置一下 <a href="https://github.com/wenjiew-astro/wenjiew-astro/blob/main/.github/workflows/blog.yml">blog.yml</a> 这个文件。</p><p>我的博客是 <a href="https://wenjiew-astro.github.io/">Wenjie Wang</a>，是部署在 Github 上面的，下面是 GPT 给我写的教程，但是我现在没有那个电脑，之后尝试了再更新。</p><p>+++</p><p>明白～Hexo 默认不自带 RSS，需要先装插件来“产出”一个 feed，然后再用那个 GitHub Action 把文章列表写进 README。</p><p>下面按顺序来：</p><hr><h2 id="1-给-Hexo-生成-RSS（一次性设置）"><a href="#1-给-Hexo-生成-RSS（一次性设置）" class="headerlink" title="1) 给 Hexo 生成 RSS（一次性设置）"></a>1) 给 Hexo 生成 RSS（一次性设置）</h2><p>在你的 Hexo 博客目录（有 <code>source/</code>、<code>themes/</code> 的那个根目录）里执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>然后在 <strong>站点配置文件</strong> <code>_config.yml</code>（根目录的，不是主题里的）加入&#x2F;修改如下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 站点基本信息（确保正确，影响 feed 的链接）</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://wenjiew-astro.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS 配置（hexo-generator-feed）</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span>            <span class="comment"># 可选 atom | rss2 | both</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span>        <span class="comment"># 生成文件名（常见：atom.xml 或 rss2.xml）</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span>             <span class="comment"># 列出最近 N 篇</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span>         <span class="comment"># 是否包含全文（true/false）</span></span><br></pre></td></tr></table></figure><p>生成并预览看看是否有 <code>atom.xml</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器访问本地 <code>http://localhost:4000/atom.xml</code> 能看到 XML 就说明成功了。</p><p>部署后，你的线上地址就会是（按上面配置）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://wenjiew-astro.github.io/atom.xml</span><br></pre></td></tr></table></figure><blockquote><p>如果你的站点是 <strong>项目页</strong>（repo 不是 <code>wenjiew-astro.github.io</code> 而是别的），那线上路径会是：<br> <code>https://wenjiew-astro.github.io/&lt;repo-name&gt;/atom.xml</code>。<br> 你的是用户页（域名就是用户名.github.io），所以直接 <code>/atom.xml</code>。</p></blockquote><hr><h2 id="2-改-GitHub-Actions（把-RSS-地址换成你的）"><a href="#2-改-GitHub-Actions（把-RSS-地址换成你的）" class="headerlink" title="2) 改 GitHub Actions（把 RSS 地址换成你的）"></a>2) 改 GitHub Actions（把 RSS 地址换成你的）</h2><p>把你现有的 workflow 改成这样（只改 url 即可；其余保留）：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Recent</span> <span class="string">Blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 0 * * *&quot;</span>   <span class="comment"># 每天 00:00 UTC 跑一次</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">generate-readme-feed</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">sarisia/actions-readme-feed@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">&quot;https://wenjiew-astro.github.io/atom.xml&quot;</span>  <span class="comment"># ← 用你刚生成的 feed</span></span><br><span class="line">          <span class="attr">file:</span> <span class="string">&quot;README.md&quot;</span></span><br><span class="line">          <span class="comment"># 可选：最多显示 5 篇、每项的格式</span></span><br><span class="line">          <span class="attr">max_item:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">&quot;- &lt;a href=&#x27;$&#123;link&#125;&#x27;&gt;$&#123;title&#125;&lt;/a&gt; &lt;sub&gt;($&#123;pubDate&#125;)&lt;/sub&gt;&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">sarisia/actions-commit@master</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-在-README-放占位符"><a href="#3-在-README-放占位符" class="headerlink" title="3) 在 README 放占位符"></a>3) 在 README 放占位符</h2><p>在 <code>README.md</code> 里加：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 📝 最近更新</span></span><br><span class="line">&lt;!--START<span class="emphasis">_SECTION:feed--&gt;</span></span><br><span class="line"><span class="emphasis">&lt;!--END_</span>SECTION:feed--&gt;</span><br></pre></td></tr></table></figure><p>Action 每次跑，会自动把最新文章列表填充在这两行之间。</p><hr><h2 id="常见问题排查"><a href="#常见问题排查" class="headerlink" title="常见问题排查"></a>常见问题排查</h2><ul><li><strong>访问 404</strong>：确认最终线上地址是否是 <code>/atom.xml</code>（或你设置的 <code>path</code>）。用户页是根目录；项目页要带仓库名。</li><li><strong>feed.xml &#x2F; rss.xml 打不开</strong>：你没有装插件或 <code>feed:</code> 节没配置；检查 <code>_config.yml</code> 是否在<strong>站点根</strong>而不是主题配置里。</li><li><strong>时区&#x2F;时间</strong>：Hexo 默认 UTC，想显示北京时间可以在 README 的格式里自己处理，或保持简单用 <code>$&#123;pubDate&#125;</code>。</li><li><strong>缓存</strong>：GitHub 对 README 图片&#x2F;内容有缓存，第一次更新后稍等一会儿或点进 Actions 的运行日志确认是否写入成功。</li></ul><hr><p>如果你把 <code>_config.yml</code>（相关几行）贴我，我可以帮你确认最终线上 feed 的准确 URL，并把 workflow 的 <code>format</code> 再美化一下（比如只显示日期不含时区、加 Emoji 等）。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github主页 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 写博客指南</title>
      <link href="/2025/08/16/hexo%E5%86%99%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/"/>
      <url>/2025/08/16/hexo%E5%86%99%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-写博客指南"><a href="#Hexo-写博客指南" class="headerlink" title="Hexo 写博客指南"></a>Hexo 写博客指南</h1><p>这是一份面向新手和进阶用户的 Hexo 写作指南，整合了常见问题与一些经验。内容涵盖目录结构、文章写作、分类标签管理、草稿发布以及部署方式等。</p><hr><h2 id="1-Hexo-目录结构"><a href="#1-Hexo-目录结构" class="headerlink" title="1. Hexo 目录结构"></a>1. Hexo 目录结构</h2><p>一个典型的 Hexo 博客目录：</p><blockquote><p>.<br>├── _config.yml        # 博客全局配置文件<br>├── scaffolds&#x2F;         # 文章模板<br>├── source&#x2F;            # 存放页面、文章、静态资源<br>│   ├── _posts&#x2F;        # 文章（Markdown 文件）<br>│   ├── about&#x2F;         # 独立页面：关于我<br>│   ├── categories&#x2F;    # 独立页面：分类<br>│   ├── tags&#x2F;          # 独立页面：标签<br>│   └── …            # 其他页面，比如 links、music<br>├── themes&#x2F;            # 主题目录（如 butterfly）<br>├── public&#x2F;            # 生成的静态页面（执行 hexo g 后出现）<br>└── package.json       # 项目依赖</p></blockquote><ul><li><strong>_posts&#x2F;</strong>：专门放文章，Hexo 会根据 Front-matter 自动生成分类、标签、归档。</li><li><strong>source&#x2F;xxx&#x2F;</strong>：放置独立页面，比如关于、友链、相册等。</li><li><strong>scaffolds&#x2F;</strong>：定义 <code>hexo new</code> 时文章的默认模板。</li><li><strong>themes&#x2F;</strong>：主题目录，可以自定义样式与功能。</li></ul><hr><h2 id="2-写文章的基本操作"><a href="#2-写文章的基本操作" class="headerlink" title="2. 写文章的基本操作"></a>2. 写文章的基本操作</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure><p>生成的文件在 <code>source/_posts/我的第一篇文章.md</code>。</p><h3 id="文章头部-Front-matter"><a href="#文章头部-Front-matter" class="headerlink" title="文章头部 Front-matter"></a>文章头部 Front-matter</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的第一篇文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-08-16 15:00:00</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">学习</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">Hexo</span>, <span class="string">教程</span>]</span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span>       <span class="comment"># 置顶</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="number">1234</span>  <span class="comment"># 固定链接（需插件）</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123</span>   <span class="comment"># 密码保护</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="草稿写作"><a href="#草稿写作" class="headerlink" title="草稿写作"></a>草稿写作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft <span class="string">&quot;草稿文章&quot;</span></span><br></pre></td></tr></table></figure><p>草稿会保存在 <code>source/_drafts/</code> 下。<br> 发布草稿：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish draft <span class="string">&quot;草稿文章&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-分类-标签-归档"><a href="#3-分类-标签-归档" class="headerlink" title="3. 分类 &#x2F; 标签 &#x2F; 归档"></a>3. 分类 &#x2F; 标签 &#x2F; 归档</h2><h3 id="文章中的分类与标签"><a href="#文章中的分类与标签" class="headerlink" title="文章中的分类与标签"></a>文章中的分类与标签</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span> <span class="string">技术</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">Hexo</span>, <span class="string">Node.js</span>]</span><br></pre></td></tr></table></figure><ul><li>分类 <strong>有层级关系</strong>（<code>categories: [技术, 前端]</code>）。</li><li>标签是 <strong>自由标签</strong>，无层级。</li></ul><h3 id="分类、标签、归档页面"><a href="#分类、标签、归档页面" class="headerlink" title="分类、标签、归档页面"></a>分类、标签、归档页面</h3><p>Hexo 不会自动生成 <code>/categories/</code>、<code>/tags/</code>、<code>/archives/</code> 页面，需要手动新建：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page archives</span><br></pre></td></tr></table></figure><p>修改生成的 <code>index.md</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">archives</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>这样访问 <code>/categories/</code> 就能显示分类索引。</p><hr><h2 id="4-独立页面"><a href="#4-独立页面" class="headerlink" title="4. 独立页面"></a>4. 独立页面</h2><p>如果你在菜单里配置了页面入口，就需要在 <code>source/</code> 下新建对应文件夹：</p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">生活</span> <span class="string">||</span> <span class="attr">fas fa-list:</span></span><br><span class="line">    <span class="string">相册:</span> <span class="string">/photos/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-camera-retro</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-music</span></span><br></pre></td></tr></table></figure><p>则需要建：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source/photos/index.md</span><br><span class="line">source/music/index.md</span><br></pre></td></tr></table></figure><hr><h2 id="5-部署博客"><a href="#5-部署博客" class="headerlink" title="5. 部署博客"></a>5. 部署博客</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean    <span class="comment"># 清理缓存和 public/</span></span><br><span class="line">hexo g        <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo s        <span class="comment"># 本地启动预览</span></span><br><span class="line">hexo d        <span class="comment"># 部署到远程</span></span><br></pre></td></tr></table></figure><h3 id="Git-部署"><a href="#Git-部署" class="headerlink" title="Git 部署"></a>Git 部署</h3><p>在 <code>_config.yml</code> 里配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装部署插件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><hr><h2 id="6-常见问题与技巧"><a href="#6-常见问题与技巧" class="headerlink" title="6. 常见问题与技巧"></a>6. 常见问题与技巧</h2><ul><li><strong>文章目录（TOC）</strong>：主题支持自动生成目录，需在 <code>_config.yml</code> 开启。</li><li><strong>置顶文章</strong>：在 Front-matter 加 <code>top: true</code>。</li><li><strong>加密文章</strong>：安装 <code>hexo-blog-encrypt</code>，Front-matter 写 <code>password: xxx</code>。</li><li><strong>多作者协作</strong>：推荐用 Git 管理 Hexo 源码（不是 public&#x2F;），每人写完文章 push，再统一部署。</li><li><strong>主题优化</strong>：可以修改主题的样式文件（如 Butterfly 的 <code>_layout/*.styl</code>），实现自定义公告栏、背景、特效等。</li></ul><hr><h2 id="7-推荐工作流"><a href="#7-推荐工作流" class="headerlink" title="7. 推荐工作流"></a>7. 推荐工作流</h2><ol><li><p>写文章：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;标题&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>本地预览：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>部署到 GitHub Pages：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Hexo 是一个非常灵活的博客框架，你可以从最基础的写文章开始，逐步扩展分类、标签、搜索、评论、统计等功能。</p><p>愿你在 Hexo 的世界里，记录自己的点滴，留下专属于你的「数字足迹」。✨</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github 搭建个人主页</title>
      <link href="/2025/08/16/hexo+github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
      <url>/2025/08/16/hexo+github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-github-搭建个人主页"><a href="#hexo-github-搭建个人主页" class="headerlink" title="hexo+github 搭建个人主页"></a>hexo+github 搭建个人主页</h1><h2 id="1-配置git"><a href="#1-配置git" class="headerlink" title="1.配置git"></a>1.配置git</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\44660\Desktop&gt; git config --global user.name &quot;wenjie-astro&quot; # user_name 填入 GitHub 用户名</span><br><span class="line">PS C:\Users\44660\Desktop&gt; git config --global user.email &quot;446601097@qq.com&quot; # user_email 填入 GitHub 注册的邮箱</span><br></pre></td></tr></table></figure><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h2><p>安装 Node.js 会包含环境变量以及 npm 的安装，安装后，可以在命令行输入如下命令检测 Node.js 是否安装成功：</p><p>第一个命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 nodejs 的版本号。</p><p>第二个命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 npm 的版本号。</p><blockquote><p>注意：这里可能会有错误</p><blockquote><p>PS C:\Users\44660\Desktop&gt; npm -v<br>npm : 无法加载文件 C:\Program Files\nodejs\npm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:&#x2F;go.microsof<br>t.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies。<br>所在位置 行:1 字符: 1</p><ul><li><p>npm -v</p><ul><li>CategoryInfo          : SecurityError: (:) []，PSSecurityException</li><li>FullyQualifiedErrorId : UnauthorizedAccess</li></ul></li></ul></blockquote><p>解决方法：</p><p>这个错误是由于 PowerShell 的执行策略限制导致的。在某些系统上，默认情况下，PowerShell 禁止运行脚本。您可以尝试以下解决方案：</p><p>以管理员身份运行 PowerShell：右键单击 PowerShell 图标，并选择”以管理员身份运行”。</p><p>修改 PowerShell 执行策略：在管理员身份的 PowerShell 窗口中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>我的这样就可以解决了</p><p><a href="https://blog.csdn.net/AIB_Kasic/article/details/130702121">修复：npm : 无法加载文件 C:\Program Files\nodejs\npm.ps1，因为在此系统上禁止运行脚本。有关详细信息-CSDN博客</a></p></blockquote><h2 id="3-配置github-ssh"><a href="#3-配置github-ssh" class="headerlink" title="3.配置github ssh"></a>3.配置github ssh</h2><p>打开 Git Bash，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;446601097@qq.com&quot;</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh 密钥。打开用户主目录 <code>C:\Users\username\.ssh</code>，.ssh文件夹一定存放在C:，至于后面的路径lenovo这个不一定每台电脑都相同。找到.ssh文件夹，打开如下：</p><p>然后找到生成的 <code>.ssh</code> 的文件夹中的 <code>id_rsa.pub</code> 密钥，将内容全部复制。其中 <code>id_rsa</code> 是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p><p>打开 <a href="https://github.com/settings/ssh/new">GitHub SSH and GPG keys</a> 页面，新建一个 ssh key：</p><p><code>Title</code> 为标题，任意填即可，将刚刚复制的 <code>id_rsa.pub</code> 内容粘贴进去，最后点击 <code>Add SSH key</code>。在 <code>Git Bash</code> 中检测 <code>GitHub</code> 公钥设置是否成功，输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>验证是否连接成功，连接成功的话，显示如下：</p><h2 id="4-安装与初始化"><a href="#4-安装与初始化" class="headerlink" title="4.安装与初始化"></a>4.安装与初始化</h2><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli # 此命令完成对 hexo 的安装</span><br></pre></td></tr></table></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 <code>D:\Blogs</code>，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入新建的博客目录，输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init # 该命令完成 hexo 在本地博客目录的初始化</span><br></pre></td></tr></table></figure><h2 id="5-安装butterfly主题之后报错"><a href="#5-安装butterfly主题之后报错" class="headerlink" title="5.安装butterfly主题之后报错"></a>5.安装butterfly主题之后报错</h2><p>extends includes&#x2F;layout.pug block content include .&#x2F;includes&#x2F;mixins&#x2F;indexPostUI.pug +indexPostUI</p><blockquote><p>需要安装<br>再运行 <code>hexo server</code>启动服务，访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，页面显示 <code>extends includes/layout.pug block content include ./includes/mixins/indexPostUI.pug +indexPostUI</code> 。 需要安装运行 <code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code> （这一个操作会很慢）。</p></blockquote><h2 id="6-hexo-操作指南"><a href="#6-hexo-操作指南" class="headerlink" title="6.hexo 操作指南"></a>6.hexo 操作指南</h2><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g # 生成静态文件</span><br></pre></td></tr></table></figure><p>执行以上命令后，Hexo 就会在 <code>public</code> 文件夹中生成相关的 <code>html</code> 文件，这些文件将来都是要提交到 <code>GitHub</code> 上的 <code>username.github.io</code> 的仓库中去的。</p><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>在 <code>Git Bash</code> 输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s # 开启本地预览</span><br></pre></td></tr></table></figure><p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到内容，<code>Ctrl+C</code> 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 <code>GitHub</code> 上。</p><p>第一次初始化的时候 <code>hexo</code> 已经帮我们写了一篇名为 Hello World 的文章，<strong>默认的主题比较丑</strong></p><h3 id="推送到GitHub"><a href="#推送到GitHub" class="headerlink" title="推送到GitHub"></a>推送到GitHub</h3><h4 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h4><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。</p><p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code> 的部分：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:fanlumaster/你的用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save # 安装部署插件</span><br></pre></td></tr></table></figure><p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.safecrlf false</span><br></pre></td></tr></table></figure><p>参考：<a href="https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important">stackoverflow</a></p><p>这个必须执行 不然使用推送必报错</p><h4 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署成功后，打开对应的网址 <code>https://username.github.io</code>，如果出现了和本地预览一样的效果，那么，表明部署成功。</p><p>对了 并不需要自己手动开启 GitHub Pages</p><p>如果你推送成功 就可以直接打开啦</p><h2 id="hexo-需要下载的组件"><a href="#hexo-需要下载的组件" class="headerlink" title="## hexo 需要下载的组件"></a>## hexo 需要下载的组件</h2><p>搜索插件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search <span class="attr">--save</span></span><br></pre></td></tr></table></figure><p>字数统计组件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount <span class="attr">--save</span> or yarn add hexo-wordcount</span><br></pre></td></tr></table></figure><p>评论区组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-next-giscus --save</span><br></pre></td></tr></table></figure><p>搜索组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h2 id="相关网页"><a href="#相关网页" class="headerlink" title="## 相关网页"></a>## 相关网页</h2><p><a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p><ul><li>官方教程</li></ul><p><a href="https://fontawesome.com/icons">Find Icons with the Perfect Look &amp; Feel | Font Awesome</a></p><ul><li>支持的图标网站</li></ul><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">【Hexo】Hexo搭建Butterfly主题并快速美化_hexo butterfly-CSDN博客</a></p><ul><li>美化教程</li></ul><p><a href="https://haowallpaper.com/">免费4K高清壁纸-电脑背景图片-Mac壁纸网站「哲风壁纸」</a></p><ul><li>一些好看的壁纸</li></ul><p><a href="https://hubiaonb.github.io/2024/04/16/hexo-github/">基于Hexo和GitHub搭建博客 - Master Blog</a></p><ul><li>最基础的搭建及使用</li></ul><p><a href="https://llunch4w.github.io/2021/06/15/hexo%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/">hexo添加看板娘 | 摸鱼的Llunch</a></p><p>[butterfly主题添加看板娘 | “永不言弃”](<a href="https://www.hastur45.cn/2025/03/08/hexo">https://www.hastur45.cn/2025/03/08/hexo</a> butterfly 博客添加看板娘&#x2F;)</p><ul><li>右下角的看板娘</li></ul><p><a href="https://blog.51cto.com/100Chocolate/2898583">【源码开放】Hexo+Github+Coding 博客butterfly 和 matery 主题 搭建完全教程【整理】_51CTO博客_github hexo 搭建博客</a></p><ul><li>访客地图</li><li><ul><li><a href="https://clustrmaps.com/">Clustrmaps - Free People Search Engine</a></li></ul></li><li>底部小红心</li></ul><p><a href="https://jachinzhang1.github.io/2025/02/04/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">hexo博客添加评论系统 | Jachin&#39;s Blog</a></p><p><a href="https://shirynl.github.io/2025/01/28/%E8%AF%84%E8%AE%BA%E6%B5%8B%E8%AF%95/">hexo-next &amp; giscus 评论测试 | 初来乍到，一无所知</a></p><ul><li>评论系统</li></ul><p><a href="https://fe32.top/articles/hexo1607/">基于 Hexo 键入搜索功能 | 唐志远</a></p><ul><li>搜索功能也没加进去，之后再说</li></ul><p><a href="https://bbling.cc/posts/3536/">hexo页脚添加鱼塘 | LinBlog</a></p><ul><li>想着要有一个🐟游动的效果，但是没有实现，之后再说吧</li></ul><p><a href="https://jzephyrsaber.github.io/2022/10/12/nightsky/">Hexo博客开启夜间模式时的星空效果 | JZephyrの小窝</a></p><ul><li>星空效果</li></ul><p><a href="https://blog.csdn.net/2201_75319686/article/details/140700493">【hexo】关于butterfly主题的文章标题及其相关信息布局的修改位置_hexo-theme-butterfly文章标题-CSDN博客</a></p><ul><li>标题居中</li></ul><p>[Butterfly主题美化-页面毛玻璃效果_毛玻璃搜索页-CSDN博客](<a href="https://blog.csdn.net/qq_38870718/article/details/122555421#:~:text=%E6%9C%AC%E6%96%87%E4%BB%8B%E7%BB%8D%E4%BA%86%E4%B8%80%E7%A7%8D%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89CSS%E6%96%87%E4%BB%B6%E6%9D%A5%E7%BE%8E%E5%8C%96Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%AE%9E%E7%8E%B0%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C%E3%80%81%E6%90%9C%E7%B4%A2%E6%A1%86%E7%BE%8E%E5%8C%96%E3%80%81%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%8F%8A%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98%E5%8A%A8%E7%94%BB%E7%AD%89%EF%BC%8C%E9%80%82%E7%94%A8%E4%BA%8E%E6%8F%90%E9%AB%98%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E8%A7%86%E8%A7%89%E4%BD%93%E9%AA%8C%E3%80%82">https://blog.csdn.net/qq_38870718/article/details/122555421#:~:text=本文介绍了一种使用自定义CSS文件来美化Hexo博客的方法，包括实现毛玻璃效果、搜索框美化、滚动条及背景渐变动画等，适用于提高个人网站的视觉体验。</a> 摘要生成于 C知道 ，由 DeepSeek-R1 满血版支持，,前往体验 &gt; 创建一个 mycss.css文件 移动到 themes[%26but%26]terflysourcecss 目录下。)</p><ul><li>毛玻璃效果</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/07/12/hello-world/"/>
      <url>/2025/07/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
